import datetime
from suds.client import Client

__author__ = 'Saeed Auditore info@auditore.org'

name = 'Parsian API'
identifier = 2
properties = ["pin"]


class BPPaymentAPI(object):
    def __init__(self, pin=None):
        """
        Bank Parsian Payment APIs
        @param pin: terminal code
        @return: None
        """
        if pin is None:
            raise Exception('pin is empty')
        self.pin = pin
        self.service_address = 'https://pec.shaparak.ir/pecpaymentgateway/EShopService.asmx?wsdl'
        self.payment_address = 'https://pec.shaparak.ir/pecpaymentgateway'
        self.namespace = 'http://tempuri.org/'
        self.params = {'auth': 0, 'state': 0}
        # self.state = 0

    @staticmethod
    def __get_local_data__():
        local_date = str(datetime.date.today()).replace('-', '')
        local_time = str(datetime.datetime.now().time()).replace(':', '')[0: 6]
        return local_date, local_time

    def request_pay_ref(self, order_id, price, call_back_address):
        """
        Request a key for payment
        @param order_id: Invoice Number or a unique long number
        @param price: long price
        @param call_back_address: website callback handler
        @return: A list of data to process
        """
        if not isinstance(order_id, int):
            raise Exception('Invalid order_id! int type expected got %s' % type(order_id))
        if not isinstance(price, int):
            raise Exception('Invalid price! int type expected! got %s' % type(price))
        if not isinstance(call_back_address, str):
            raise Exception('Invalid call_back_address', 'str type expected')
        # local_date, local_time = self.__get_local_data__()
        try:
            # server = WSDL.Proxy(self.service_address)
            # server.methods['PinPaymentRequest'].namespace = self.namespace
            # server.soapproxy.config.dumpSOAPOut = 1
            # server.soapproxy.config.dumpSOAPIn = 1
            # server.soapproxy.config.debug = 1
            # server.soapproxy.noroot = True
            # server.soapproxy.simplify_objects = True
            # server.soapproxy.config.simplify_objects = True
            # server.soapproxy.methodattrs
            server = Client(self.service_address)
            data = server.service.PinPaymentRequest(
                pin=self.pin,
                amount=int(price),
                orderId=int(order_id),
                callbackUrl=call_back_address,
                authority=1,
                status=1)
            return data['status'], data['authority']
        except Exception as e:
            return False, e.message

    def verify_payment(self, ref_number):
        """
        After payment is Done you must call this method to verify it
        @param ref_number: the authority code that generated by bank
        @return: True if the transaction was correct
        """
        if not isinstance(ref_number, long):
            raise Exception('Invalid order_id. long type expected')
        try:
            # server = WSDL.Proxy(self.service_address)
            server = Client(self.service_address)
            # server.methods['PinPaymentEnquiry'].namespace = self.namespace
            res = server.service.PinPaymentEnquiry(pin=self.pin,
                                                   authority=ref_number,
                                                   status=1)
            # print res
            return res['status']
        except Exception as e:
            print e.message
            return -1

    def settle_payment(self):
        try:
            # server = WSDL.Proxy(self.service_address)
            server = Client(self.service_address)
            # server.methods['PinSettlement'].namespace = self.namespace
            res = server.service.PinSettlement(pin=self.pin, status=0)
            return True, res['status']
        except Exception as e:
            return False, e.message

    def undo_payment(self, order_id, ref_id):
        if not isinstance(order_id, int):
            raise Exception('Invalid order_id. int type expected!')
        if not isinstance(ref_id, long):
            raise Exception('Invalid ref_id. int type expected!')
        try:
            # server = WSDL.Proxy(self.service_address)
            # server.methods['PinReversal'].namespace = self.namespace
            server = Client(self.service_address)
            res = server.service.PinReversal(pin=self.pin,
                                             orderId=order_id,
                                             orderToReversal=ref_id,
                                             status=0)
            return True, res['status']
        except Exception as e:
            return False, e.message

    def get_payment_address(self):
        return self.payment_address
